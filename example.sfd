module Maybe {
    type Maybe[A] = Some(A) | None

    def map[A, B](f: A -> B, self: Maybe[A]): Maybe[B] = match self {
        Some(a) => Some(f(a)),
        None => None
    }
}

module Either {
    type Either[A, B] = Left(A) | Right(B)

    def map[A, B, C](f: B -> C, self: Either[A, B]): Either[A, C] = match self {
        Left(a) => Left(a),
        Right(b) => Right(f(b))
    }

    open Maybe
    def toMaybe[A, B](self: Either[A, B]): Maybe[B] = match self {
        Left(a) => None,
        Right(b) => Some(b)
    }
}

module Bool {
    type Bool = True | False

    def toInt(self: Bool): Int = match self {
        True => 1,
        False => 0
    }
}

open Bool

def test(): Maybe.Maybe[Int] =
    Either.toMaybe(Either.map(Bool.toInt, Either.Right(True)))